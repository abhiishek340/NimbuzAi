"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-speech-recognition";
exports.ids = ["vendor-chunks/react-speech-recognition"];
exports.modules = {

/***/ "./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = exports.isNative = void 0;\nvar NativeSpeechRecognition =  false && (0);\n\nvar isNative = function isNative(SpeechRecognition) {\n  return SpeechRecognition === NativeSpeechRecognition;\n};\n\nexports.isNative = isNative;\nvar _default = NativeSpeechRecognition;\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9OYXRpdmVTcGVlY2hSZWNvZ25pdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsOENBQTZDO0VBQzNDRyxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsa0JBQUEsR0FBcUJBLGdCQUFBLEdBQW1CLEtBQUssQ0FBN0M7QUFDQSxJQUFJRyx1QkFBdUIsR0FBRyxXQUFrQ0MsQ0FBbEMsQ0FBOUI7O0FBRUEsSUFBSUYsUUFBUSxHQUFHLFNBQVNBLFFBQVQsQ0FBa0JHLGlCQUFsQixFQUFxQztFQUNsRCxPQUFPQSxpQkFBaUIsS0FBS0YsdUJBQTdCO0FBQ0QsQ0FGRDs7QUFJQUgsZ0JBQUEsR0FBbUJFLFFBQW5CO0FBQ0EsSUFBSVEsUUFBUSxHQUFHUCx1QkFBZjtBQUNBSCxrQkFBQSxHQUFxQlUsUUFBckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmFuZGFpLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwZWVjaC1yZWNvZ25pdGlvbi9saWIvTmF0aXZlU3BlZWNoUmVjb2duaXRpb24uanM/YjJiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5pc05hdGl2ZSA9IHZvaWQgMDtcbnZhciBOYXRpdmVTcGVlY2hSZWNvZ25pdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICh3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93LndlYmtpdFNwZWVjaFJlY29nbml0aW9uIHx8IHdpbmRvdy5tb3pTcGVlY2hSZWNvZ25pdGlvbiB8fCB3aW5kb3cubXNTcGVlY2hSZWNvZ25pdGlvbiB8fCB3aW5kb3cub1NwZWVjaFJlY29nbml0aW9uKTtcblxudmFyIGlzTmF0aXZlID0gZnVuY3Rpb24gaXNOYXRpdmUoU3BlZWNoUmVjb2duaXRpb24pIHtcbiAgcmV0dXJuIFNwZWVjaFJlY29nbml0aW9uID09PSBOYXRpdmVTcGVlY2hSZWNvZ25pdGlvbjtcbn07XG5cbmV4cG9ydHMuaXNOYXRpdmUgPSBpc05hdGl2ZTtcbnZhciBfZGVmYXVsdCA9IE5hdGl2ZVNwZWVjaFJlY29nbml0aW9uO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc05hdGl2ZSIsIk5hdGl2ZVNwZWVjaFJlY29nbml0aW9uIiwid2luZG93IiwiU3BlZWNoUmVjb2duaXRpb24iLCJ3ZWJraXRTcGVlY2hSZWNvZ25pdGlvbiIsIm1velNwZWVjaFJlY29nbml0aW9uIiwibXNTcGVlY2hSZWNvZ25pdGlvbiIsIm9TcGVlY2hSZWNvZ25pdGlvbiIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\n");

/***/ }),

/***/ "./node_modules/react-speech-recognition/lib/RecognitionManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/RecognitionManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar _regeneratorRuntime = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _isAndroid = _interopRequireDefault(__webpack_require__(/*! ./isAndroid */ \"./node_modules/react-speech-recognition/lib/isAndroid.js\"));\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-speech-recognition/lib/utils.js\");\n\nvar _NativeSpeechRecognition = __webpack_require__(/*! ./NativeSpeechRecognition */ \"./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar RecognitionManager = /*#__PURE__*/function () {\n  function RecognitionManager(SpeechRecognition) {\n    _classCallCheck(this, RecognitionManager);\n\n    this.recognition = null;\n    this.pauseAfterDisconnect = false;\n    this.interimTranscript = '';\n    this.finalTranscript = '';\n    this.listening = false;\n    this.isMicrophoneAvailable = true;\n    this.subscribers = {};\n\n    this.onStopListening = function () {};\n\n    this.previousResultWasFinalOnly = false;\n    this.resetTranscript = this.resetTranscript.bind(this);\n    this.startListening = this.startListening.bind(this);\n    this.stopListening = this.stopListening.bind(this);\n    this.abortListening = this.abortListening.bind(this);\n    this.setSpeechRecognition = this.setSpeechRecognition.bind(this);\n    this.disableRecognition = this.disableRecognition.bind(this);\n    this.setSpeechRecognition(SpeechRecognition);\n\n    if ((0, _isAndroid[\"default\"])()) {\n      this.updateFinalTranscript = (0, _utils.debounce)(this.updateFinalTranscript, 250, true);\n    }\n  }\n\n  _createClass(RecognitionManager, [{\n    key: \"setSpeechRecognition\",\n    value: function setSpeechRecognition(SpeechRecognition) {\n      var browserSupportsRecogniser = !!SpeechRecognition && ((0, _NativeSpeechRecognition.isNative)(SpeechRecognition) || (0, _utils.browserSupportsPolyfills)());\n\n      if (browserSupportsRecogniser) {\n        this.disableRecognition();\n        this.recognition = new SpeechRecognition();\n        this.recognition.continuous = false;\n        this.recognition.interimResults = true;\n        this.recognition.onresult = this.updateTranscript.bind(this);\n        this.recognition.onend = this.onRecognitionDisconnect.bind(this);\n        this.recognition.onerror = this.onError.bind(this);\n      }\n\n      this.emitBrowserSupportsSpeechRecognitionChange(browserSupportsRecogniser);\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(id, callbacks) {\n      this.subscribers[id] = callbacks;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      delete this.subscribers[id];\n    }\n  }, {\n    key: \"emitListeningChange\",\n    value: function emitListeningChange(listening) {\n      var _this = this;\n\n      this.listening = listening;\n      Object.keys(this.subscribers).forEach(function (id) {\n        var onListeningChange = _this.subscribers[id].onListeningChange;\n        onListeningChange(listening);\n      });\n    }\n  }, {\n    key: \"emitMicrophoneAvailabilityChange\",\n    value: function emitMicrophoneAvailabilityChange(isMicrophoneAvailable) {\n      var _this2 = this;\n\n      this.isMicrophoneAvailable = isMicrophoneAvailable;\n      Object.keys(this.subscribers).forEach(function (id) {\n        var onMicrophoneAvailabilityChange = _this2.subscribers[id].onMicrophoneAvailabilityChange;\n        onMicrophoneAvailabilityChange(isMicrophoneAvailable);\n      });\n    }\n  }, {\n    key: \"emitTranscriptChange\",\n    value: function emitTranscriptChange(interimTranscript, finalTranscript) {\n      var _this3 = this;\n\n      Object.keys(this.subscribers).forEach(function (id) {\n        var onTranscriptChange = _this3.subscribers[id].onTranscriptChange;\n        onTranscriptChange(interimTranscript, finalTranscript);\n      });\n    }\n  }, {\n    key: \"emitClearTranscript\",\n    value: function emitClearTranscript() {\n      var _this4 = this;\n\n      Object.keys(this.subscribers).forEach(function (id) {\n        var onClearTranscript = _this4.subscribers[id].onClearTranscript;\n        onClearTranscript();\n      });\n    }\n  }, {\n    key: \"emitBrowserSupportsSpeechRecognitionChange\",\n    value: function emitBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange) {\n      var _this5 = this;\n\n      Object.keys(this.subscribers).forEach(function (id) {\n        var _this5$subscribers$id = _this5.subscribers[id],\n            onBrowserSupportsSpeechRecognitionChange = _this5$subscribers$id.onBrowserSupportsSpeechRecognitionChange,\n            onBrowserSupportsContinuousListeningChange = _this5$subscribers$id.onBrowserSupportsContinuousListeningChange;\n        onBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange);\n        onBrowserSupportsContinuousListeningChange(browserSupportsSpeechRecognitionChange);\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(disconnectType) {\n      if (this.recognition && this.listening) {\n        switch (disconnectType) {\n          case 'ABORT':\n            this.pauseAfterDisconnect = true;\n            this.abort();\n            break;\n\n          case 'RESET':\n            this.pauseAfterDisconnect = false;\n            this.abort();\n            break;\n\n          case 'STOP':\n          default:\n            this.pauseAfterDisconnect = true;\n            this.stop();\n        }\n      }\n    }\n  }, {\n    key: \"disableRecognition\",\n    value: function disableRecognition() {\n      if (this.recognition) {\n        this.recognition.onresult = function () {};\n\n        this.recognition.onend = function () {};\n\n        this.recognition.onerror = function () {};\n\n        if (this.listening) {\n          this.stopListening();\n        }\n      }\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(event) {\n      if (event && event.error && event.error === 'not-allowed') {\n        this.emitMicrophoneAvailabilityChange(false);\n        this.disableRecognition();\n      }\n    }\n  }, {\n    key: \"onRecognitionDisconnect\",\n    value: function onRecognitionDisconnect() {\n      this.onStopListening();\n      this.listening = false;\n\n      if (this.pauseAfterDisconnect) {\n        this.emitListeningChange(false);\n      } else if (this.recognition) {\n        if (this.recognition.continuous) {\n          this.startListening({\n            continuous: this.recognition.continuous\n          });\n        } else {\n          this.emitListeningChange(false);\n        }\n      }\n\n      this.pauseAfterDisconnect = false;\n    }\n  }, {\n    key: \"updateTranscript\",\n    value: function updateTranscript(_ref) {\n      var results = _ref.results,\n          resultIndex = _ref.resultIndex;\n      var currentIndex = resultIndex === undefined ? results.length - 1 : resultIndex;\n      this.interimTranscript = '';\n      this.finalTranscript = '';\n\n      for (var i = currentIndex; i < results.length; ++i) {\n        if (results[i].isFinal && (!(0, _isAndroid[\"default\"])() || results[i][0].confidence > 0)) {\n          this.updateFinalTranscript(results[i][0].transcript);\n        } else {\n          this.interimTranscript = (0, _utils.concatTranscripts)(this.interimTranscript, results[i][0].transcript);\n        }\n      }\n\n      var isDuplicateResult = false;\n\n      if (this.interimTranscript === '' && this.finalTranscript !== '') {\n        if (this.previousResultWasFinalOnly) {\n          isDuplicateResult = true;\n        }\n\n        this.previousResultWasFinalOnly = true;\n      } else {\n        this.previousResultWasFinalOnly = false;\n      }\n\n      if (!isDuplicateResult) {\n        this.emitTranscriptChange(this.interimTranscript, this.finalTranscript);\n      }\n    }\n  }, {\n    key: \"updateFinalTranscript\",\n    value: function updateFinalTranscript(newFinalTranscript) {\n      this.finalTranscript = (0, _utils.concatTranscripts)(this.finalTranscript, newFinalTranscript);\n    }\n  }, {\n    key: \"resetTranscript\",\n    value: function resetTranscript() {\n      this.disconnect('RESET');\n    }\n  }, {\n    key: \"startListening\",\n    value: function () {\n      var _startListening = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _ref2,\n            _ref2$continuous,\n            continuous,\n            language,\n            isContinuousChanged,\n            isLanguageChanged,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref2$continuous = _ref2.continuous, continuous = _ref2$continuous === void 0 ? false : _ref2$continuous, language = _ref2.language;\n\n                if (this.recognition) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                isContinuousChanged = continuous !== this.recognition.continuous;\n                isLanguageChanged = language && language !== this.recognition.lang;\n\n                if (!(isContinuousChanged || isLanguageChanged)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                if (!this.listening) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 9;\n                return this.stopListening();\n\n              case 9:\n                this.recognition.continuous = isContinuousChanged ? continuous : this.recognition.continuous;\n                this.recognition.lang = isLanguageChanged ? language : this.recognition.lang;\n\n              case 11:\n                if (this.listening) {\n                  _context.next = 22;\n                  break;\n                }\n\n                if (!this.recognition.continuous) {\n                  this.resetTranscript();\n                  this.emitClearTranscript();\n                }\n\n                _context.prev = 13;\n                _context.next = 16;\n                return this.start();\n\n              case 16:\n                this.emitListeningChange(true);\n                _context.next = 22;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](13); // DOMExceptions indicate a redundant microphone start - safe to swallow\n\n                if (!(_context.t0 instanceof DOMException)) {\n                  this.emitMicrophoneAvailabilityChange(false);\n                }\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[13, 19]]);\n      }));\n\n      function startListening() {\n        return _startListening.apply(this, arguments);\n      }\n\n      return startListening;\n    }()\n  }, {\n    key: \"abortListening\",\n    value: function () {\n      var _abortListening = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this6 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.disconnect('ABORT');\n                this.emitListeningChange(false);\n                _context2.next = 4;\n                return new Promise(function (resolve) {\n                  _this6.onStopListening = resolve;\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function abortListening() {\n        return _abortListening.apply(this, arguments);\n      }\n\n      return abortListening;\n    }()\n  }, {\n    key: \"stopListening\",\n    value: function () {\n      var _stopListening = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this7 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.disconnect('STOP');\n                this.emitListeningChange(false);\n                _context3.next = 4;\n                return new Promise(function (resolve) {\n                  _this7.onStopListening = resolve;\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function stopListening() {\n        return _stopListening.apply(this, arguments);\n      }\n\n      return stopListening;\n    }()\n  }, {\n    key: \"getRecognition\",\n    value: function getRecognition() {\n      return this.recognition;\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.recognition && !this.listening)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.recognition.start();\n\n              case 3:\n                this.listening = true;\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.recognition && this.listening) {\n        this.recognition.stop();\n        this.listening = false;\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this.recognition && this.listening) {\n        this.recognition.abort();\n        this.listening = false;\n      }\n    }\n  }]);\n\n  return RecognitionManager;\n}();\n\nexports[\"default\"] = RecognitionManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/RecognitionManager.js\n");

/***/ }),

/***/ "./node_modules/react-speech-recognition/lib/SpeechRecognition.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/SpeechRecognition.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar _regeneratorRuntime = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = exports.useSpeechRecognition = void 0;\n\nvar _react = __webpack_require__(/*! react */ \"react\");\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-speech-recognition/lib/utils.js\");\n\nvar _actions = __webpack_require__(/*! ./actions */ \"./node_modules/react-speech-recognition/lib/actions.js\");\n\nvar _reducers = __webpack_require__(/*! ./reducers */ \"./node_modules/react-speech-recognition/lib/reducers.js\");\n\nvar _RecognitionManager = _interopRequireDefault(__webpack_require__(/*! ./RecognitionManager */ \"./node_modules/react-speech-recognition/lib/RecognitionManager.js\"));\n\nvar _isAndroid = _interopRequireDefault(__webpack_require__(/*! ./isAndroid */ \"./node_modules/react-speech-recognition/lib/isAndroid.js\"));\n\nvar _NativeSpeechRecognition = _interopRequireDefault(__webpack_require__(/*! ./NativeSpeechRecognition */ \"./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar _browserSupportsSpeechRecognition = !!_NativeSpeechRecognition[\"default\"];\n\nvar _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !(0, _isAndroid[\"default\"])();\n\nvar recognitionManager;\n\nvar useSpeechRecognition = function useSpeechRecognition() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$transcribing = _ref.transcribing,\n      transcribing = _ref$transcribing === void 0 ? true : _ref$transcribing,\n      _ref$clearTranscriptO = _ref.clearTranscriptOnListen,\n      clearTranscriptOnListen = _ref$clearTranscriptO === void 0 ? true : _ref$clearTranscriptO,\n      _ref$commands = _ref.commands,\n      commands = _ref$commands === void 0 ? [] : _ref$commands;\n\n  var _useState = (0, _react.useState)(SpeechRecognition.getRecognitionManager()),\n      _useState2 = _slicedToArray(_useState, 1),\n      recognitionManager = _useState2[0];\n\n  var _useState3 = (0, _react.useState)(_browserSupportsSpeechRecognition),\n      _useState4 = _slicedToArray(_useState3, 2),\n      browserSupportsSpeechRecognition = _useState4[0],\n      setBrowserSupportsSpeechRecognition = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(_browserSupportsContinuousListening),\n      _useState6 = _slicedToArray(_useState5, 2),\n      browserSupportsContinuousListening = _useState6[0],\n      setBrowserSupportsContinuousListening = _useState6[1];\n\n  var _useReducer = (0, _react.useReducer)(_reducers.transcriptReducer, {\n    interimTranscript: recognitionManager.interimTranscript,\n    finalTranscript: ''\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      _useReducer2$ = _useReducer2[0],\n      interimTranscript = _useReducer2$.interimTranscript,\n      finalTranscript = _useReducer2$.finalTranscript,\n      dispatch = _useReducer2[1];\n\n  var _useState7 = (0, _react.useState)(recognitionManager.listening),\n      _useState8 = _slicedToArray(_useState7, 2),\n      listening = _useState8[0],\n      setListening = _useState8[1];\n\n  var _useState9 = (0, _react.useState)(recognitionManager.isMicrophoneAvailable),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isMicrophoneAvailable = _useState10[0],\n      setMicrophoneAvailable = _useState10[1];\n\n  var commandsRef = (0, _react.useRef)(commands);\n  commandsRef.current = commands;\n\n  var dispatchClearTranscript = function dispatchClearTranscript() {\n    dispatch((0, _actions.clearTranscript)());\n  };\n\n  var resetTranscript = (0, _react.useCallback)(function () {\n    recognitionManager.resetTranscript();\n    dispatchClearTranscript();\n  }, [recognitionManager]);\n\n  var testFuzzyMatch = function testFuzzyMatch(command, input, fuzzyMatchingThreshold) {\n    var commandToString = _typeof(command) === 'object' ? command.toString() : command;\n    var commandWithoutSpecials = commandToString.replace(/[&/\\\\#,+()!$~%.'\":*?<>{}]/g, '').replace(/  +/g, ' ').trim();\n    var howSimilar = (0, _utils.compareTwoStringsUsingDiceCoefficient)(commandWithoutSpecials, input);\n\n    if (howSimilar >= fuzzyMatchingThreshold) {\n      return {\n        command: command,\n        commandWithoutSpecials: commandWithoutSpecials,\n        howSimilar: howSimilar,\n        isFuzzyMatch: true\n      };\n    }\n\n    return null;\n  };\n\n  var testMatch = function testMatch(command, input) {\n    var pattern = (0, _utils.commandToRegExp)(command);\n    var result = pattern.exec(input);\n\n    if (result) {\n      return {\n        command: command,\n        parameters: result.slice(1)\n      };\n    }\n\n    return null;\n  };\n\n  var matchCommands = (0, _react.useCallback)(function (newInterimTranscript, newFinalTranscript) {\n    commandsRef.current.forEach(function (_ref2) {\n      var command = _ref2.command,\n          callback = _ref2.callback,\n          _ref2$matchInterim = _ref2.matchInterim,\n          matchInterim = _ref2$matchInterim === void 0 ? false : _ref2$matchInterim,\n          _ref2$isFuzzyMatch = _ref2.isFuzzyMatch,\n          isFuzzyMatch = _ref2$isFuzzyMatch === void 0 ? false : _ref2$isFuzzyMatch,\n          _ref2$fuzzyMatchingTh = _ref2.fuzzyMatchingThreshold,\n          fuzzyMatchingThreshold = _ref2$fuzzyMatchingTh === void 0 ? 0.8 : _ref2$fuzzyMatchingTh,\n          _ref2$bestMatchOnly = _ref2.bestMatchOnly,\n          bestMatchOnly = _ref2$bestMatchOnly === void 0 ? false : _ref2$bestMatchOnly;\n      var input = !newFinalTranscript && matchInterim ? newInterimTranscript.trim() : newFinalTranscript.trim();\n      var subcommands = Array.isArray(command) ? command : [command];\n      var results = subcommands.map(function (subcommand) {\n        if (isFuzzyMatch) {\n          return testFuzzyMatch(subcommand, input, fuzzyMatchingThreshold);\n        }\n\n        return testMatch(subcommand, input);\n      }).filter(function (x) {\n        return x;\n      });\n\n      if (isFuzzyMatch && bestMatchOnly && results.length >= 2) {\n        results.sort(function (a, b) {\n          return b.howSimilar - a.howSimilar;\n        });\n        var _results$ = results[0],\n            _command = _results$.command,\n            commandWithoutSpecials = _results$.commandWithoutSpecials,\n            howSimilar = _results$.howSimilar;\n        callback(commandWithoutSpecials, input, howSimilar, {\n          command: _command,\n          resetTranscript: resetTranscript\n        });\n      } else {\n        results.forEach(function (result) {\n          if (result.isFuzzyMatch) {\n            var _command2 = result.command,\n                _commandWithoutSpecials = result.commandWithoutSpecials,\n                _howSimilar = result.howSimilar;\n            callback(_commandWithoutSpecials, input, _howSimilar, {\n              command: _command2,\n              resetTranscript: resetTranscript\n            });\n          } else {\n            var _command3 = result.command,\n                parameters = result.parameters;\n            callback.apply(void 0, _toConsumableArray(parameters).concat([{\n              command: _command3,\n              resetTranscript: resetTranscript\n            }]));\n          }\n        });\n      }\n    });\n  }, [resetTranscript]);\n  var handleTranscriptChange = (0, _react.useCallback)(function (newInterimTranscript, newFinalTranscript) {\n    if (transcribing) {\n      dispatch((0, _actions.appendTranscript)(newInterimTranscript, newFinalTranscript));\n    }\n\n    matchCommands(newInterimTranscript, newFinalTranscript);\n  }, [matchCommands, transcribing]);\n  var handleClearTranscript = (0, _react.useCallback)(function () {\n    if (clearTranscriptOnListen) {\n      dispatchClearTranscript();\n    }\n  }, [clearTranscriptOnListen]);\n  (0, _react.useEffect)(function () {\n    var id = SpeechRecognition.counter;\n    SpeechRecognition.counter += 1;\n    var callbacks = {\n      onListeningChange: setListening,\n      onMicrophoneAvailabilityChange: setMicrophoneAvailable,\n      onTranscriptChange: handleTranscriptChange,\n      onClearTranscript: handleClearTranscript,\n      onBrowserSupportsSpeechRecognitionChange: setBrowserSupportsSpeechRecognition,\n      onBrowserSupportsContinuousListeningChange: setBrowserSupportsContinuousListening\n    };\n    recognitionManager.subscribe(id, callbacks);\n    return function () {\n      recognitionManager.unsubscribe(id);\n    };\n  }, [transcribing, clearTranscriptOnListen, recognitionManager, handleTranscriptChange, handleClearTranscript]);\n  var transcript = (0, _utils.concatTranscripts)(finalTranscript, interimTranscript);\n  return {\n    transcript: transcript,\n    interimTranscript: interimTranscript,\n    finalTranscript: finalTranscript,\n    listening: listening,\n    isMicrophoneAvailable: isMicrophoneAvailable,\n    resetTranscript: resetTranscript,\n    browserSupportsSpeechRecognition: browserSupportsSpeechRecognition,\n    browserSupportsContinuousListening: browserSupportsContinuousListening\n  };\n};\n\nexports.useSpeechRecognition = useSpeechRecognition;\nvar SpeechRecognition = {\n  counter: 0,\n  applyPolyfill: function applyPolyfill(PolyfillSpeechRecognition) {\n    if (recognitionManager) {\n      recognitionManager.setSpeechRecognition(PolyfillSpeechRecognition);\n    } else {\n      recognitionManager = new _RecognitionManager[\"default\"](PolyfillSpeechRecognition);\n    }\n\n    var browserSupportsPolyfill = !!PolyfillSpeechRecognition && (0, _utils.browserSupportsPolyfills)();\n    _browserSupportsSpeechRecognition = browserSupportsPolyfill;\n    _browserSupportsContinuousListening = browserSupportsPolyfill;\n  },\n  removePolyfill: function removePolyfill() {\n    if (recognitionManager) {\n      recognitionManager.setSpeechRecognition(_NativeSpeechRecognition[\"default\"]);\n    } else {\n      recognitionManager = new _RecognitionManager[\"default\"](_NativeSpeechRecognition[\"default\"]);\n    }\n\n    _browserSupportsSpeechRecognition = !!_NativeSpeechRecognition[\"default\"];\n    _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !(0, _isAndroid[\"default\"])();\n  },\n  getRecognitionManager: function getRecognitionManager() {\n    if (!recognitionManager) {\n      recognitionManager = new _RecognitionManager[\"default\"](_NativeSpeechRecognition[\"default\"]);\n    }\n\n    return recognitionManager;\n  },\n  getRecognition: function getRecognition() {\n    var recognitionManager = SpeechRecognition.getRecognitionManager();\n    return recognitionManager.getRecognition();\n  },\n  startListening: function () {\n    var _startListening = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _ref3,\n          continuous,\n          language,\n          recognitionManager,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref3 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, continuous = _ref3.continuous, language = _ref3.language;\n              recognitionManager = SpeechRecognition.getRecognitionManager();\n              _context.next = 4;\n              return recognitionManager.startListening({\n                continuous: continuous,\n                language: language\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function startListening() {\n      return _startListening.apply(this, arguments);\n    }\n\n    return startListening;\n  }(),\n  stopListening: function () {\n    var _stopListening = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var recognitionManager;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              recognitionManager = SpeechRecognition.getRecognitionManager();\n              _context2.next = 3;\n              return recognitionManager.stopListening();\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function stopListening() {\n      return _stopListening.apply(this, arguments);\n    }\n\n    return stopListening;\n  }(),\n  abortListening: function () {\n    var _abortListening = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var recognitionManager;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              recognitionManager = SpeechRecognition.getRecognitionManager();\n              _context3.next = 3;\n              return recognitionManager.abortListening();\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function abortListening() {\n      return _abortListening.apply(this, arguments);\n    }\n\n    return abortListening;\n  }(),\n  browserSupportsSpeechRecognition: function browserSupportsSpeechRecognition() {\n    return _browserSupportsSpeechRecognition;\n  },\n  browserSupportsContinuousListening: function browserSupportsContinuousListening() {\n    return _browserSupportsContinuousListening;\n  }\n};\nvar _default = SpeechRecognition;\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/SpeechRecognition.js\n");

/***/ }),

/***/ "./node_modules/react-speech-recognition/lib/actions.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/actions.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.appendTranscript = exports.clearTranscript = void 0;\n\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-speech-recognition/lib/constants.js\");\n\nvar clearTranscript = function clearTranscript() {\n  return {\n    type: _constants.CLEAR_TRANSCRIPT\n  };\n};\n\nexports.clearTranscript = clearTranscript;\n\nvar appendTranscript = function appendTranscript(interimTranscript, finalTranscript) {\n  return {\n    type: _constants.APPEND_TRANSCRIPT,\n    payload: {\n      interimTranscript: interimTranscript,\n      finalTranscript: finalTranscript\n    }\n  };\n};\n\nexports.appendTranscript = appendTranscript;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9hY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViQSw4Q0FBNkM7RUFDM0NHLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCx3QkFBQSxHQUEyQkEsdUJBQUEsR0FBMEIsS0FBSyxDQUExRDs7QUFFQSxJQUFJSSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsNkVBQUQsQ0FBeEI7O0FBRUEsSUFBSUYsZUFBZSxHQUFHLFNBQVNBLGVBQVQsR0FBMkI7RUFDL0MsT0FBTztJQUNMRyxJQUFJLEVBQUVGLFVBQVUsQ0FBQ0c7RUFEWixDQUFQO0FBR0QsQ0FKRDs7QUFNQVAsdUJBQUEsR0FBMEJHLGVBQTFCOztBQUVBLElBQUlELGdCQUFnQixHQUFHLFNBQVNBLGdCQUFULENBQTBCTSxpQkFBMUIsRUFBNkNDLGVBQTdDLEVBQThEO0VBQ25GLE9BQU87SUFDTEgsSUFBSSxFQUFFRixVQUFVLENBQUNNLGlCQURaO0lBRUxDLE9BQU8sRUFBRTtNQUNQSCxpQkFBaUIsRUFBRUEsaUJBRFo7TUFFUEMsZUFBZSxFQUFFQTtJQUZWO0VBRkosQ0FBUDtBQU9ELENBUkQ7O0FBVUFULHdCQUFBLEdBQTJCRSxnQkFBM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmFuZGFpLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwZWVjaC1yZWNvZ25pdGlvbi9saWIvYWN0aW9ucy5qcz9hYzcyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hcHBlbmRUcmFuc2NyaXB0ID0gZXhwb3J0cy5jbGVhclRyYW5zY3JpcHQgPSB2b2lkIDA7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuXG52YXIgY2xlYXJUcmFuc2NyaXB0ID0gZnVuY3Rpb24gY2xlYXJUcmFuc2NyaXB0KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IF9jb25zdGFudHMuQ0xFQVJfVFJBTlNDUklQVFxuICB9O1xufTtcblxuZXhwb3J0cy5jbGVhclRyYW5zY3JpcHQgPSBjbGVhclRyYW5zY3JpcHQ7XG5cbnZhciBhcHBlbmRUcmFuc2NyaXB0ID0gZnVuY3Rpb24gYXBwZW5kVHJhbnNjcmlwdChpbnRlcmltVHJhbnNjcmlwdCwgZmluYWxUcmFuc2NyaXB0KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogX2NvbnN0YW50cy5BUFBFTkRfVFJBTlNDUklQVCxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBpbnRlcmltVHJhbnNjcmlwdDogaW50ZXJpbVRyYW5zY3JpcHQsXG4gICAgICBmaW5hbFRyYW5zY3JpcHQ6IGZpbmFsVHJhbnNjcmlwdFxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuYXBwZW5kVHJhbnNjcmlwdCA9IGFwcGVuZFRyYW5zY3JpcHQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXBwZW5kVHJhbnNjcmlwdCIsImNsZWFyVHJhbnNjcmlwdCIsIl9jb25zdGFudHMiLCJyZXF1aXJlIiwidHlwZSIsIkNMRUFSX1RSQU5TQ1JJUFQiLCJpbnRlcmltVHJhbnNjcmlwdCIsImZpbmFsVHJhbnNjcmlwdCIsIkFQUEVORF9UUkFOU0NSSVBUIiwicGF5bG9hZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/actions.js\n");

/***/ }),

/***/ "./node_modules/react-speech-recognition/lib/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/constants.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.APPEND_TRANSCRIPT = exports.CLEAR_TRANSCRIPT = void 0;\nvar CLEAR_TRANSCRIPT = 'CLEAR_TRANSCRIPT';\nexports.CLEAR_TRANSCRIPT = CLEAR_TRANSCRIPT;\nvar APPEND_TRANSCRIPT = 'APPEND_TRANSCRIPT';\nexports.APPEND_TRANSCRIPT = APPEND_TRANSCRIPT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLDhDQUE2QztFQUMzQ0csS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELHlCQUFBLEdBQTRCQSx3QkFBQSxHQUEyQixLQUFLLENBQTVEO0FBQ0EsSUFBSUcsZ0JBQWdCLEdBQUcsa0JBQXZCO0FBQ0FILHdCQUFBLEdBQTJCRyxnQkFBM0I7QUFDQSxJQUFJRCxpQkFBaUIsR0FBRyxtQkFBeEI7QUFDQUYseUJBQUEsR0FBNEJFLGlCQUE1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2JyYW5kYWktZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9jb25zdGFudHMuanM/OWY4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQVBQRU5EX1RSQU5TQ1JJUFQgPSBleHBvcnRzLkNMRUFSX1RSQU5TQ1JJUFQgPSB2b2lkIDA7XG52YXIgQ0xFQVJfVFJBTlNDUklQVCA9ICdDTEVBUl9UUkFOU0NSSVBUJztcbmV4cG9ydHMuQ0xFQVJfVFJBTlNDUklQVCA9IENMRUFSX1RSQU5TQ1JJUFQ7XG52YXIgQVBQRU5EX1RSQU5TQ1JJUFQgPSAnQVBQRU5EX1RSQU5TQ1JJUFQnO1xuZXhwb3J0cy5BUFBFTkRfVFJBTlNDUklQVCA9IEFQUEVORF9UUkFOU0NSSVBUOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFQUEVORF9UUkFOU0NSSVBUIiwiQ0xFQVJfVFJBTlNDUklQVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/constants.js\n");

/***/ }),

/***/ "./node_modules/react-speech-recognition/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"useSpeechRecognition\", ({\n  enumerable: true,\n  get: function get() {\n    return _SpeechRecognition.useSpeechRecognition;\n  }\n}));\nexports[\"default\"] = void 0;\n\nvar _SpeechRecognition = _interopRequireWildcard(__webpack_require__(/*! ./SpeechRecognition */ \"./node_modules/react-speech-recognition/lib/SpeechRecognition.js\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar _default = _SpeechRecognition[\"default\"];\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxPQUFULENBQWlCQyxHQUFqQixFQUFzQjtFQUFFOztFQUEyQixJQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBT0EsTUFBTSxDQUFDQyxRQUFkLEtBQTJCLFFBQS9ELEVBQXlFO0lBQUVILE9BQU8sR0FBRyxTQUFTQSxPQUFULENBQWlCQyxHQUFqQixFQUFzQjtNQUFFLE9BQU8sT0FBT0EsR0FBZDtJQUFvQixDQUF0RDtFQUF5RCxDQUFwSSxNQUEwSTtJQUFFRCxPQUFPLEdBQUcsU0FBU0EsT0FBVCxDQUFpQkMsR0FBakIsRUFBc0I7TUFBRSxPQUFPQSxHQUFHLElBQUksT0FBT0MsTUFBUCxLQUFrQixVQUF6QixJQUF1Q0QsR0FBRyxDQUFDRyxXQUFKLEtBQW9CRixNQUEzRCxJQUFxRUQsR0FBRyxLQUFLQyxNQUFNLENBQUNHLFNBQXBGLEdBQWdHLFFBQWhHLEdBQTJHLE9BQU9KLEdBQXpIO0lBQStILENBQWpLO0VBQW9LOztFQUFDLE9BQU9ELE9BQU8sQ0FBQ0MsR0FBRCxDQUFkO0FBQXNCOztBQUUxWEssOENBQTZDO0VBQzNDRyxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUgsd0RBQXVEO0VBQ3JESSxVQUFVLEVBQUUsSUFEeUM7RUFFckRDLEdBQUcsRUFBRSxTQUFTQSxHQUFULEdBQWU7SUFDbEIsT0FBT0Msa0JBQWtCLENBQUNDLG9CQUExQjtFQUNEO0FBSm9ELENBQXZEO0FBTUFMLGtCQUFBLEdBQXFCLEtBQUssQ0FBMUI7O0FBRUEsSUFBSUksa0JBQWtCLEdBQUdFLHVCQUF1QixDQUFDQyxtQkFBTyxDQUFDLDZGQUFELENBQVIsQ0FBaEQ7O0FBRUEsU0FBU0Msd0JBQVQsR0FBb0M7RUFBRSxJQUFJLE9BQU9DLE9BQVAsS0FBbUIsVUFBdkIsRUFBbUMsT0FBTyxJQUFQO0VBQWEsSUFBSUMsS0FBSyxHQUFHLElBQUlELE9BQUosRUFBWjs7RUFBMkJELHdCQUF3QixHQUFHLFNBQVNBLHdCQUFULEdBQW9DO0lBQUUsT0FBT0UsS0FBUDtFQUFlLENBQWhGOztFQUFrRixPQUFPQSxLQUFQO0FBQWU7O0FBRWxOLFNBQVNKLHVCQUFULENBQWlDYixHQUFqQyxFQUFzQztFQUFFLElBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDa0IsVUFBZixFQUEyQjtJQUFFLE9BQU9sQixHQUFQO0VBQWE7O0VBQUMsSUFBSUEsR0FBRyxLQUFLLElBQVIsSUFBZ0JELE9BQU8sQ0FBQ0MsR0FBRCxDQUFQLEtBQWlCLFFBQWpCLElBQTZCLE9BQU9BLEdBQVAsS0FBZSxVQUFoRSxFQUE0RTtJQUFFLE9BQU87TUFBRSxXQUFXQTtJQUFiLENBQVA7RUFBNEI7O0VBQUMsSUFBSWlCLEtBQUssR0FBR0Ysd0JBQXdCLEVBQXBDOztFQUF3QyxJQUFJRSxLQUFLLElBQUlBLEtBQUssQ0FBQ0UsR0FBTixDQUFVbkIsR0FBVixDQUFiLEVBQTZCO0lBQUUsT0FBT2lCLEtBQUssQ0FBQ1AsR0FBTixDQUFVVixHQUFWLENBQVA7RUFBd0I7O0VBQUMsSUFBSW9CLE1BQU0sR0FBRyxFQUFiO0VBQWlCLElBQUlDLHFCQUFxQixHQUFHaEIsTUFBTSxDQUFDQyxjQUFQLElBQXlCRCxNQUFNLENBQUNpQix3QkFBNUQ7O0VBQXNGLEtBQUssSUFBSUMsR0FBVCxJQUFnQnZCLEdBQWhCLEVBQXFCO0lBQUUsSUFBSUssTUFBTSxDQUFDRCxTQUFQLENBQWlCb0IsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDekIsR0FBckMsRUFBMEN1QixHQUExQyxDQUFKLEVBQW9EO01BQUUsSUFBSUcsSUFBSSxHQUFHTCxxQkFBcUIsR0FBR2hCLE1BQU0sQ0FBQ2lCLHdCQUFQLENBQWdDdEIsR0FBaEMsRUFBcUN1QixHQUFyQyxDQUFILEdBQStDLElBQS9FOztNQUFxRixJQUFJRyxJQUFJLEtBQUtBLElBQUksQ0FBQ2hCLEdBQUwsSUFBWWdCLElBQUksQ0FBQ0MsR0FBdEIsQ0FBUixFQUFvQztRQUFFdEIsTUFBTSxDQUFDQyxjQUFQLENBQXNCYyxNQUF0QixFQUE4QkcsR0FBOUIsRUFBbUNHLElBQW5DO01BQTJDLENBQWpGLE1BQXVGO1FBQUVOLE1BQU0sQ0FBQ0csR0FBRCxDQUFOLEdBQWN2QixHQUFHLENBQUN1QixHQUFELENBQWpCO01BQXlCO0lBQUU7RUFBRTs7RUFBQ0gsTUFBTSxDQUFDLFNBQUQsQ0FBTixHQUFvQnBCLEdBQXBCOztFQUF5QixJQUFJaUIsS0FBSixFQUFXO0lBQUVBLEtBQUssQ0FBQ1UsR0FBTixDQUFVM0IsR0FBVixFQUFlb0IsTUFBZjtFQUF5Qjs7RUFBQyxPQUFPQSxNQUFQO0FBQWdCOztBQUU5dUIsSUFBSVEsUUFBUSxHQUFHakIsa0JBQWtCLENBQUMsU0FBRCxDQUFqQztBQUNBSixrQkFBQSxHQUFxQnFCLFFBQXJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJhbmRhaS1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2luZGV4LmpzP2Y1ZTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVNwZWVjaFJlY29nbml0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TcGVlY2hSZWNvZ25pdGlvbi51c2VTcGVlY2hSZWNvZ25pdGlvbjtcbiAgfVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9TcGVlY2hSZWNvZ25pdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1NwZWVjaFJlY29nbml0aW9uXCIpKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxudmFyIF9kZWZhdWx0ID0gX1NwZWVjaFJlY29nbml0aW9uW1wiZGVmYXVsdFwiXTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX1NwZWVjaFJlY29nbml0aW9uIiwidXNlU3BlZWNoUmVjb2duaXRpb24iLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJfX2VzTW9kdWxlIiwiaGFzIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/index.js\n");

/***/ }),

/***/ "./node_modules/react-speech-recognition/lib/isAndroid.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/isAndroid.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _default = function _default() {\n  return /(android)/i.test(typeof navigator !== 'undefined' ? navigator.userAgent : '');\n};\n\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pc0FuZHJvaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLDhDQUE2QztFQUMzQ0csS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELGtCQUFBLEdBQXFCLEtBQUssQ0FBMUI7O0FBRUEsSUFBSUUsUUFBUSxHQUFHLFNBQVNBLFFBQVQsR0FBb0I7RUFDakMsT0FBTyxhQUFhQyxJQUFiLENBQWtCLE9BQU9DLFNBQVAsS0FBcUIsV0FBckIsR0FBbUNBLFNBQVMsQ0FBQ0MsU0FBN0MsR0FBeUQsRUFBM0UsQ0FBUDtBQUNELENBRkQ7O0FBSUFMLGtCQUFBLEdBQXFCRSxRQUFyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2JyYW5kYWktZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pc0FuZHJvaWQuanM/MmUyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgcmV0dXJuIC8oYW5kcm9pZCkvaS50ZXN0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6ICcnKTtcbn07XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2RlZmF1bHQiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/isAndroid.js\n");

/***/ }),

/***/ "./node_modules/react-speech-recognition/lib/reducers.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/reducers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.transcriptReducer = void 0;\n\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-speech-recognition/lib/constants.js\");\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-speech-recognition/lib/utils.js\");\n\nvar transcriptReducer = function transcriptReducer(state, action) {\n  switch (action.type) {\n    case _constants.CLEAR_TRANSCRIPT:\n      return {\n        interimTranscript: '',\n        finalTranscript: ''\n      };\n\n    case _constants.APPEND_TRANSCRIPT:\n      return {\n        interimTranscript: action.payload.interimTranscript,\n        finalTranscript: (0, _utils.concatTranscripts)(state.finalTranscript, action.payload.finalTranscript)\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexports.transcriptReducer = transcriptReducer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9yZWR1Y2Vycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsOENBQTZDO0VBQzNDRyxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQseUJBQUEsR0FBNEIsS0FBSyxDQUFqQzs7QUFFQSxJQUFJRyxVQUFVLEdBQUdDLG1CQUFPLENBQUMsNkVBQUQsQ0FBeEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHFFQUFELENBQXBCOztBQUVBLElBQUlGLGlCQUFpQixHQUFHLFNBQVNBLGlCQUFULENBQTJCSSxLQUEzQixFQUFrQ0MsTUFBbEMsRUFBMEM7RUFDaEUsUUFBUUEsTUFBTSxDQUFDQyxJQUFmO0lBQ0UsS0FBS0wsVUFBVSxDQUFDTSxnQkFBaEI7TUFDRSxPQUFPO1FBQ0xDLGlCQUFpQixFQUFFLEVBRGQ7UUFFTEMsZUFBZSxFQUFFO01BRlosQ0FBUDs7SUFLRixLQUFLUixVQUFVLENBQUNTLGlCQUFoQjtNQUNFLE9BQU87UUFDTEYsaUJBQWlCLEVBQUVILE1BQU0sQ0FBQ00sT0FBUCxDQUFlSCxpQkFEN0I7UUFFTEMsZUFBZSxFQUFFLENBQUMsR0FBR04sTUFBTSxDQUFDUyxpQkFBWCxFQUE4QlIsS0FBSyxDQUFDSyxlQUFwQyxFQUFxREosTUFBTSxDQUFDTSxPQUFQLENBQWVGLGVBQXBFO01BRlosQ0FBUDs7SUFLRjtNQUNFLE1BQU0sSUFBSUksS0FBSixFQUFOO0VBZEo7QUFnQkQsQ0FqQkQ7O0FBbUJBZix5QkFBQSxHQUE0QkUsaUJBQTVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJhbmRhaS1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL3JlZHVjZXJzLmpzPzJlNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRyYW5zY3JpcHRSZWR1Y2VyID0gdm9pZCAwO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgdHJhbnNjcmlwdFJlZHVjZXIgPSBmdW5jdGlvbiB0cmFuc2NyaXB0UmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIF9jb25zdGFudHMuQ0xFQVJfVFJBTlNDUklQVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGludGVyaW1UcmFuc2NyaXB0OiAnJyxcbiAgICAgICAgZmluYWxUcmFuc2NyaXB0OiAnJ1xuICAgICAgfTtcblxuICAgIGNhc2UgX2NvbnN0YW50cy5BUFBFTkRfVFJBTlNDUklQVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGludGVyaW1UcmFuc2NyaXB0OiBhY3Rpb24ucGF5bG9hZC5pbnRlcmltVHJhbnNjcmlwdCxcbiAgICAgICAgZmluYWxUcmFuc2NyaXB0OiAoMCwgX3V0aWxzLmNvbmNhdFRyYW5zY3JpcHRzKShzdGF0ZS5maW5hbFRyYW5zY3JpcHQsIGFjdGlvbi5wYXlsb2FkLmZpbmFsVHJhbnNjcmlwdClcbiAgICAgIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gIH1cbn07XG5cbmV4cG9ydHMudHJhbnNjcmlwdFJlZHVjZXIgPSB0cmFuc2NyaXB0UmVkdWNlcjsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0cmFuc2NyaXB0UmVkdWNlciIsIl9jb25zdGFudHMiLCJyZXF1aXJlIiwiX3V0aWxzIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiQ0xFQVJfVFJBTlNDUklQVCIsImludGVyaW1UcmFuc2NyaXB0IiwiZmluYWxUcmFuc2NyaXB0IiwiQVBQRU5EX1RSQU5TQ1JJUFQiLCJwYXlsb2FkIiwiY29uY2F0VHJhbnNjcmlwdHMiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/reducers.js\n");

/***/ }),

/***/ "./node_modules/react-speech-recognition/lib/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.browserSupportsPolyfills = exports.compareTwoStringsUsingDiceCoefficient = exports.commandToRegExp = exports.concatTranscripts = exports.debounce = void 0;\n\nvar debounce = function debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this;\n    var args = arguments;\n\n    var later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nexports.debounce = debounce;\n\nvar concatTranscripts = function concatTranscripts() {\n  for (var _len = arguments.length, transcriptParts = new Array(_len), _key = 0; _key < _len; _key++) {\n    transcriptParts[_key] = arguments[_key];\n  }\n\n  return transcriptParts.map(function (t) {\n    return t.trim();\n  }).join(' ').trim();\n}; // The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\n\n\nexports.concatTranscripts = concatTranscripts;\nvar optionalParam = /\\s*\\((.*?)\\)\\s*/g;\nvar optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\nvar namedParam = /(\\(\\?)?:\\w+/g;\nvar splatParam = /\\*/g;\nvar escapeRegExp = /[-{}[\\]+?.,\\\\^$|#]/g;\n\nvar commandToRegExp = function commandToRegExp(command) {\n  if (command instanceof RegExp) {\n    return new RegExp(command.source, 'i');\n  }\n\n  command = command.replace(escapeRegExp, '\\\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, function (match, optional) {\n    return optional ? match : '([^\\\\s]+)';\n  }).replace(splatParam, '(.*?)').replace(optionalRegex, '\\\\s*$1?\\\\s*');\n  return new RegExp('^' + command + '$', 'i');\n}; // this is from https://github.com/aceakash/string-similarity\n\n\nexports.commandToRegExp = commandToRegExp;\n\nvar compareTwoStringsUsingDiceCoefficient = function compareTwoStringsUsingDiceCoefficient(first, second) {\n  first = first.replace(/\\s+/g, '').toLowerCase();\n  second = second.replace(/\\s+/g, '').toLowerCase();\n  if (!first.length && !second.length) return 1; // if both are empty strings\n\n  if (!first.length || !second.length) return 0; // if only one is empty string\n\n  if (first === second) return 1; // identical\n\n  if (first.length === 1 && second.length === 1) return 0; // both are 1-letter strings\n\n  if (first.length < 2 || second.length < 2) return 0; // if either is a 1-letter string\n\n  var firstBigrams = new Map();\n\n  for (var i = 0; i < first.length - 1; i++) {\n    var bigram = first.substring(i, i + 2);\n    var count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n    firstBigrams.set(bigram, count);\n  }\n\n  var intersectionSize = 0;\n\n  for (var _i = 0; _i < second.length - 1; _i++) {\n    var _bigram = second.substring(_i, _i + 2);\n\n    var _count = firstBigrams.has(_bigram) ? firstBigrams.get(_bigram) : 0;\n\n    if (_count > 0) {\n      firstBigrams.set(_bigram, _count - 1);\n      intersectionSize++;\n    }\n  }\n\n  return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\n\nexports.compareTwoStringsUsingDiceCoefficient = compareTwoStringsUsingDiceCoefficient;\n\nvar browserSupportsPolyfills = function browserSupportsPolyfills() {\n  return  false && (0);\n};\n\nexports.browserSupportsPolyfills = browserSupportsPolyfills;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-speech-recognition/lib/utils.js\n");

/***/ })

};
;